//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class Sorting {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        long t = Integer.parseInt(br.readLine());
        for (int g = 0; g < t; g++) {
            String[] str = (br.readLine()).trim().split(" ");
            long arr[] = new long[str.length];
            for (int i = 0; i < str.length; i++) arr[i] = Integer.parseInt(str[i]);
            System.out.println(new Solution().inversionCount(arr));
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    static long inversionCount(long arr[]) {
        long[] temp = new long[arr.length];
        return mergesort(arr, temp, 0, arr.length - 1);
    }
    
    static long mergesort(long[] arr,long[] temp,int left, int right){
        int count = 0;
        if(left< right){
            int mid = (left+right)/2;
            count += mergesort(arr, temp, left, mid);
            count += mergesort(arr, temp, mid+1, right);
             // Count while merging both halves
            count += merge(arr, temp, left, mid, right);
        }
        return count;
        
    }
    
    static long merge(long[] arr, long[] temp, int left, int mid, int right){
                int i = left;   // Starting index for left subarray
        int j = mid + 1; // Starting index for right subarray
        int k = left;   // Starting index to be sorted
        long invCount = 0;

        // Merge the two subarrays and count inversions
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                // All elements from arr[i] to arr[mid] are greater than arr[j]
                invCount += (mid + 1 - i);
            }
        }
        
        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        // Copy remaining elements of right subarray, if any
        while (j <= right) {
            temp[k++] = arr[j++];
        }

        // Copy the sorted subarray back into the original array
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }

        return invCount;

    }
}
