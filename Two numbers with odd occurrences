//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int N = Integer.parseInt(read.readLine());
            String input_line[] = read.readLine().trim().split("\\s+");
            int Arr[]= new int[N];
            for(int i = 0; i < N; i++)
                Arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            int[] ans = ob.twoOddNum(Arr,N);
            for(int i = 0; i < ans.length; i++)
            {
                System.out.print(ans[i] + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


//User function Template for Java

//User function Template for Java
class Solution
{
    public int[] twoOddNum(int Arr[], int N)
    {
         int XOR_total = 0;
        for (int num : Arr) {
            XOR_total ^= num;
        }

        // Step 2: Find the rightmost set bit in XOR_total
        int rightmostSetBit = XOR_total & -XOR_total;

        // Step 3: Partition the numbers based on this bit and XOR them separately
        int x = 0, y = 0; // x and y are the two odd occurring numbers
        for (int num : Arr) {
            if ((num & rightmostSetBit) == 0) {
                // This number belongs to group 1 (where the rightmost set bit is 0)
                x ^= num;
            } else {
                // This number belongs to group 2 (where the rightmost set bit is 1)
                y ^= num;
            }
        }

         int[] result = new int[2];
        if (x > y) {
            result[0] = x;
            result[1] = y;
        } else {
            result[0] = y;
            result[1] = x;
        }
        
        return result;
    }
}
